#!/usr/bin/env python3

import os
import sys
import sqlite3
from collections import defaultdict, OrderedDict
from multiprocessing import Pool
import argparse
from tqdm import tqdm
from pycvesearch import CVESearch
import csv
import yaml
from yaml.representer import Representer
yaml.add_representer(defaultdict, Representer.represent_dict)
represent_dict_order = lambda self, data:  self.represent_mapping('tag:yaml.org,2002:map', data.items())
yaml.add_representer(OrderedDict, represent_dict_order)

HOSTS_DIR = None
OUTPUT_DIR = None
INSTALLED_PACKAGE_FN = None


def collect_cve(host):
    conn = sqlite3.connect('cpe.sqlite3')
    sql_cursor = conn.cursor()
    cve = CVESearch()
    cve_by_software = defaultdict(OrderedDict)
    sql_query = 'SELECT product, vendor, cpe_uri FROM categorized_cpes WHERE product=? ORDER BY length(cpe_uri)'
    
    with open(os.path.join(HOSTS_DIR, host, INSTALLED_PACKAGE_FN)) as csv_file:
        csv_reader = list(csv.reader(csv_file, delimiter=','))[1:]

        for (product, version) in csv_reader:
            sql_cursor.execute(sql_query, ( product,))
            sql_cpe = sql_cursor.fetchone()
            if sql_cpe is None:
                continue
            vendor = sql_cpe[1]
            cve_data = cve.search('{}/{}:{}'.format(product, vendor, version))
            cve_list = list()
            for single_cve in cve_data:
                cve_list.append(OrderedDict({'id': single_cve.get('id'),
                                             'cvss': float(single_cve.get('cvss','0')),
                                             'cwe': single_cve.get('cwe', '')}))
            
            if len(cve_list) > 0:
                cve_by_software[product]['version'] = version
                cve_by_software[product]['cve'] = sorted(cve_list, key=lambda cve: cve['id'])
    
    os.makedirs(os.path.join(OUTPUT_DIR, host), exist_ok=True)
    with open(os.path.join(OUTPUT_DIR, host, 'cve.yml'), 'w') as outfile:
        yaml.dump(cve_by_software, outfile, default_flow_style=False)

def collect_cve_from_hosts():
    hosts = [dir_ for dir_ in os.listdir(HOSTS_DIR) if os.path.isdir(os.path.join(HOSTS_DIR, dir_))] 

    pool = Pool()
    for _ in tqdm(pool.imap_unordered(collect_cve, hosts), total=len(hosts)):
        pass
    pool.close()
    pool.join()

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input_dir', default='../System-Collector/output/')
    parser.add_argument('-o', '--output_dir',
                        default='../System-Collector/output/')
    parser.add_argument('-f', '--installed-package-fn', default='installed_packages.csv')
    args = parser.parse_args()

    global HOSTS_DIR
    global OUTPUT_DIR
    global INSTALLED_PACKAGE_FN
    HOSTS_DIR = args.input_dir
    OUTPUT_DIR = args.output_dir
    INSTALLED_PACKAGE_FN =  args.installed_package_fn

    collect_cve_from_hosts()

if __name__ == '__main__':
    sys.exit(main())
